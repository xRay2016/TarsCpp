// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 2.4.13.
// **********************************************************************

#ifndef __QUERYF_H_
#define __QUERYF_H_

#include <map>
#include <string>
#include <vector>
#include "tup/Tars.h"
#include "tup/TarsJson.h"
using namespace std;
#include "EndpointF.h"
#include "servant/ServantProxy.h"
#include "servant/Servant.h"


namespace tars
{

    /* callback of async proxy for client */
    class QueryFPrxCallback: public tars::ServantProxyCallback
    {
    public:
        virtual ~QueryFPrxCallback(){}
        virtual void callback_findObjectById(const vector<tars::EndpointF>& ret)
        { throw std::runtime_error("callback_findObjectById() override incorrect."); }
        virtual void callback_findObjectById_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_findObjectById_exception() override incorrect."); }

        virtual void callback_findObjectById4All(tars::Int32 ret,  const vector<tars::EndpointF>& activeEp,  const vector<tars::EndpointF>& inactiveEp)
        { throw std::runtime_error("callback_findObjectById4All() override incorrect."); }
        virtual void callback_findObjectById4All_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_findObjectById4All_exception() override incorrect."); }

        virtual void callback_findObjectById4Any(tars::Int32 ret,  const vector<tars::EndpointF>& activeEp,  const vector<tars::EndpointF>& inactiveEp)
        { throw std::runtime_error("callback_findObjectById4Any() override incorrect."); }
        virtual void callback_findObjectById4Any_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_findObjectById4Any_exception() override incorrect."); }

        virtual void callback_findObjectByIdInSameGroup(tars::Int32 ret,  const vector<tars::EndpointF>& activeEp,  const vector<tars::EndpointF>& inactiveEp)
        { throw std::runtime_error("callback_findObjectByIdInSameGroup() override incorrect."); }
        virtual void callback_findObjectByIdInSameGroup_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_findObjectByIdInSameGroup_exception() override incorrect."); }

        virtual void callback_findObjectByIdInSameSet(tars::Int32 ret,  const vector<tars::EndpointF>& activeEp,  const vector<tars::EndpointF>& inactiveEp)
        { throw std::runtime_error("callback_findObjectByIdInSameSet() override incorrect."); }
        virtual void callback_findObjectByIdInSameSet_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_findObjectByIdInSameSet_exception() override incorrect."); }

        virtual void callback_findObjectByIdInSameStation(tars::Int32 ret,  const vector<tars::EndpointF>& activeEp,  const vector<tars::EndpointF>& inactiveEp)
        { throw std::runtime_error("callback_findObjectByIdInSameStation() override incorrect."); }
        virtual void callback_findObjectByIdInSameStation_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_findObjectByIdInSameStation_exception() override incorrect."); }

        virtual void callback_findSubsetConfigById(tars::Int32 ret,  const tars::SubsetConf& conf)
        { throw std::runtime_error("callback_findSubsetConfigById() override incorrect."); }
        virtual void callback_findSubsetConfigById_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_findSubsetConfigById_exception() override incorrect."); }

    public:
        virtual const map<std::string, std::string> & getResponseContext() const
        {
            CallbackThreadData * pCbtd = CallbackThreadData::getData();
            assert(pCbtd != NULL);

            if(!pCbtd->getContextValid())
            {
                throw TC_Exception("cann't get response context");
            }
            return pCbtd->getResponseContext();
        }

    public:
        virtual int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __QueryF_all[]=
            {
                "findObjectById",
                "findObjectById4All",
                "findObjectById4Any",
                "findObjectByIdInSameGroup",
                "findObjectByIdInSameSet",
                "findObjectByIdInSameStation",
                "findSubsetConfigById"
            };
            pair<string*, string*> r = equal_range(__QueryF_all, __QueryF_all+7, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __QueryF_all)
            {
                case 0:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findObjectById_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    vector<tars::EndpointF> _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_findObjectById(_ret);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findObjectById4All_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    vector<tars::EndpointF> activeEp;
                    _is.read(activeEp, 2, true);
                    vector<tars::EndpointF> inactiveEp;
                    _is.read(inactiveEp, 3, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_findObjectById4All(_ret, activeEp, inactiveEp);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findObjectById4Any_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    vector<tars::EndpointF> activeEp;
                    _is.read(activeEp, 2, true);
                    vector<tars::EndpointF> inactiveEp;
                    _is.read(inactiveEp, 3, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_findObjectById4Any(_ret, activeEp, inactiveEp);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findObjectByIdInSameGroup_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    vector<tars::EndpointF> activeEp;
                    _is.read(activeEp, 2, true);
                    vector<tars::EndpointF> inactiveEp;
                    _is.read(inactiveEp, 3, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_findObjectByIdInSameGroup(_ret, activeEp, inactiveEp);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 4:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findObjectByIdInSameSet_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    vector<tars::EndpointF> activeEp;
                    _is.read(activeEp, 3, true);
                    vector<tars::EndpointF> inactiveEp;
                    _is.read(inactiveEp, 4, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_findObjectByIdInSameSet(_ret, activeEp, inactiveEp);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 5:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findObjectByIdInSameStation_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    vector<tars::EndpointF> activeEp;
                    _is.read(activeEp, 3, true);
                    vector<tars::EndpointF> inactiveEp;
                    _is.read(inactiveEp, 4, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_findObjectByIdInSameStation(_ret, activeEp, inactiveEp);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 6:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findSubsetConfigById_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    tars::SubsetConf conf;
                    _is.read(conf, 2, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_findSubsetConfigById(_ret, conf);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    };
    typedef tars::TC_AutoPtr<QueryFPrxCallback> QueryFPrxCallbackPtr;

    /* callback of coroutine async proxy for client */
    class QueryFCoroPrxCallback: public QueryFPrxCallback
    {
    public:
        virtual ~QueryFCoroPrxCallback(){}
    public:
        virtual const map<std::string, std::string> & getResponseContext() const { return _mRspContext; }

        virtual void setResponseContext(const map<std::string, std::string> &mContext) { _mRspContext = mContext; }

    public:
        int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __QueryF_all[]=
            {
                "findObjectById",
                "findObjectById4All",
                "findObjectById4Any",
                "findObjectByIdInSameGroup",
                "findObjectByIdInSameSet",
                "findObjectByIdInSameStation",
                "findSubsetConfigById"
            };

            pair<string*, string*> r = equal_range(__QueryF_all, __QueryF_all+7, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __QueryF_all)
            {
                case 0:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findObjectById_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        vector<tars::EndpointF> _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response->context);

                        callback_findObjectById(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_findObjectById_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_findObjectById_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findObjectById4All_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        vector<tars::EndpointF> activeEp;
                        _is.read(activeEp, 2, true);
                        vector<tars::EndpointF> inactiveEp;
                        _is.read(inactiveEp, 3, true);
                        setResponseContext(msg->response->context);

                        callback_findObjectById4All(_ret, activeEp, inactiveEp);

                    }
                    catch(std::exception &ex)
                    {
                        callback_findObjectById4All_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_findObjectById4All_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findObjectById4Any_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        vector<tars::EndpointF> activeEp;
                        _is.read(activeEp, 2, true);
                        vector<tars::EndpointF> inactiveEp;
                        _is.read(inactiveEp, 3, true);
                        setResponseContext(msg->response->context);

                        callback_findObjectById4Any(_ret, activeEp, inactiveEp);

                    }
                    catch(std::exception &ex)
                    {
                        callback_findObjectById4Any_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_findObjectById4Any_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findObjectByIdInSameGroup_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        vector<tars::EndpointF> activeEp;
                        _is.read(activeEp, 2, true);
                        vector<tars::EndpointF> inactiveEp;
                        _is.read(inactiveEp, 3, true);
                        setResponseContext(msg->response->context);

                        callback_findObjectByIdInSameGroup(_ret, activeEp, inactiveEp);

                    }
                    catch(std::exception &ex)
                    {
                        callback_findObjectByIdInSameGroup_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_findObjectByIdInSameGroup_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 4:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findObjectByIdInSameSet_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        vector<tars::EndpointF> activeEp;
                        _is.read(activeEp, 3, true);
                        vector<tars::EndpointF> inactiveEp;
                        _is.read(inactiveEp, 4, true);
                        setResponseContext(msg->response->context);

                        callback_findObjectByIdInSameSet(_ret, activeEp, inactiveEp);

                    }
                    catch(std::exception &ex)
                    {
                        callback_findObjectByIdInSameSet_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_findObjectByIdInSameSet_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 5:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findObjectByIdInSameStation_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        vector<tars::EndpointF> activeEp;
                        _is.read(activeEp, 3, true);
                        vector<tars::EndpointF> inactiveEp;
                        _is.read(inactiveEp, 4, true);
                        setResponseContext(msg->response->context);

                        callback_findObjectByIdInSameStation(_ret, activeEp, inactiveEp);

                    }
                    catch(std::exception &ex)
                    {
                        callback_findObjectByIdInSameStation_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_findObjectByIdInSameStation_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 6:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findSubsetConfigById_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        tars::SubsetConf conf;
                        _is.read(conf, 2, true);
                        setResponseContext(msg->response->context);

                        callback_findSubsetConfigById(_ret, conf);

                    }
                    catch(std::exception &ex)
                    {
                        callback_findSubsetConfigById_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_findSubsetConfigById_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    protected:
        map<std::string, std::string> _mRspContext;
    };
    typedef tars::TC_AutoPtr<QueryFCoroPrxCallback> QueryFCoroPrxCallbackPtr;

    /* proxy for client */
    class QueryFProxy : public tars::ServantProxy
    {
    public:
        typedef map<string, string> TARS_CONTEXT;
        vector<tars::EndpointF> findObjectById(const std::string & id,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"findObjectById", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            vector<tars::EndpointF> _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_findObjectById(QueryFPrxCallbackPtr callback,const std::string &id,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"findObjectById", _os, context, _mStatus, callback);
        }
        
        void coro_findObjectById(QueryFCoroPrxCallbackPtr callback,const std::string &id,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"findObjectById", _os, context, _mStatus, callback, true);
        }

        tars::Int32 findObjectById4All(const std::string & id,vector<tars::EndpointF> &activeEp,vector<tars::EndpointF> &inactiveEp,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            _os.write(activeEp, 2);
            _os.write(inactiveEp, 3);
            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"findObjectById4All", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(activeEp, 2, true);
            _is.read(inactiveEp, 3, true);
            return _ret;
        }

        void async_findObjectById4All(QueryFPrxCallbackPtr callback,const std::string &id,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"findObjectById4All", _os, context, _mStatus, callback);
        }
        
        void coro_findObjectById4All(QueryFCoroPrxCallbackPtr callback,const std::string &id,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"findObjectById4All", _os, context, _mStatus, callback, true);
        }

        tars::Int32 findObjectById4Any(const std::string & id,vector<tars::EndpointF> &activeEp,vector<tars::EndpointF> &inactiveEp,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            _os.write(activeEp, 2);
            _os.write(inactiveEp, 3);
            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"findObjectById4Any", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(activeEp, 2, true);
            _is.read(inactiveEp, 3, true);
            return _ret;
        }

        void async_findObjectById4Any(QueryFPrxCallbackPtr callback,const std::string &id,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"findObjectById4Any", _os, context, _mStatus, callback);
        }
        
        void coro_findObjectById4Any(QueryFCoroPrxCallbackPtr callback,const std::string &id,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"findObjectById4Any", _os, context, _mStatus, callback, true);
        }

        tars::Int32 findObjectByIdInSameGroup(const std::string & id,vector<tars::EndpointF> &activeEp,vector<tars::EndpointF> &inactiveEp,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            _os.write(activeEp, 2);
            _os.write(inactiveEp, 3);
            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"findObjectByIdInSameGroup", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(activeEp, 2, true);
            _is.read(inactiveEp, 3, true);
            return _ret;
        }

        void async_findObjectByIdInSameGroup(QueryFPrxCallbackPtr callback,const std::string &id,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"findObjectByIdInSameGroup", _os, context, _mStatus, callback);
        }
        
        void coro_findObjectByIdInSameGroup(QueryFCoroPrxCallbackPtr callback,const std::string &id,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"findObjectByIdInSameGroup", _os, context, _mStatus, callback, true);
        }

        tars::Int32 findObjectByIdInSameSet(const std::string & id,const std::string & setId,vector<tars::EndpointF> &activeEp,vector<tars::EndpointF> &inactiveEp,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            _os.write(setId, 2);
            _os.write(activeEp, 3);
            _os.write(inactiveEp, 4);
            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"findObjectByIdInSameSet", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(activeEp, 3, true);
            _is.read(inactiveEp, 4, true);
            return _ret;
        }

        void async_findObjectByIdInSameSet(QueryFPrxCallbackPtr callback,const std::string &id,const std::string &setId,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            _os.write(setId, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"findObjectByIdInSameSet", _os, context, _mStatus, callback);
        }
        
        void coro_findObjectByIdInSameSet(QueryFCoroPrxCallbackPtr callback,const std::string &id,const std::string &setId,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            _os.write(setId, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"findObjectByIdInSameSet", _os, context, _mStatus, callback, true);
        }

        tars::Int32 findObjectByIdInSameStation(const std::string & id,const std::string & sStation,vector<tars::EndpointF> &activeEp,vector<tars::EndpointF> &inactiveEp,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            _os.write(sStation, 2);
            _os.write(activeEp, 3);
            _os.write(inactiveEp, 4);
            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"findObjectByIdInSameStation", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(activeEp, 3, true);
            _is.read(inactiveEp, 4, true);
            return _ret;
        }

        void async_findObjectByIdInSameStation(QueryFPrxCallbackPtr callback,const std::string &id,const std::string &sStation,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            _os.write(sStation, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"findObjectByIdInSameStation", _os, context, _mStatus, callback);
        }
        
        void coro_findObjectByIdInSameStation(QueryFCoroPrxCallbackPtr callback,const std::string &id,const std::string &sStation,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            _os.write(sStation, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"findObjectByIdInSameStation", _os, context, _mStatus, callback, true);
        }

        tars::Int32 findSubsetConfigById(const std::string & id,tars::SubsetConf &conf,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            _os.write(conf, 2);
            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"findSubsetConfigById", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(conf, 2, true);
            return _ret;
        }

        void async_findSubsetConfigById(QueryFPrxCallbackPtr callback,const std::string &id,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"findSubsetConfigById", _os, context, _mStatus, callback);
        }
        
        void coro_findSubsetConfigById(QueryFCoroPrxCallbackPtr callback,const std::string &id,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(id, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"findSubsetConfigById", _os, context, _mStatus, callback, true);
        }

        QueryFProxy* tars_hash(int64_t key)
        {
            return (QueryFProxy*)ServantProxy::tars_hash(key);
        }

        QueryFProxy* tars_consistent_hash(int64_t key)
        {
            return (QueryFProxy*)ServantProxy::tars_consistent_hash(key);
        }

        QueryFProxy* tars_set_timeout(int msecond)
        {
            return (QueryFProxy*)ServantProxy::tars_set_timeout(msecond);
        }

        static const char* tars_prxname() { return "QueryFProxy"; }
    };
    typedef tars::TC_AutoPtr<QueryFProxy> QueryFPrx;

    /* servant for server */
    class QueryF : public tars::Servant
    {
    public:
        virtual ~QueryF(){}
        virtual vector<tars::EndpointF> findObjectById(const std::string & id,tars::TarsCurrentPtr current) = 0;
        static void async_response_findObjectById(tars::TarsCurrentPtr current, const vector<tars::EndpointF> &_ret)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("tars_ret", _ret);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 findObjectById4All(const std::string & id,vector<tars::EndpointF> &activeEp,vector<tars::EndpointF> &inactiveEp,tars::TarsCurrentPtr current) = 0;
        static void async_response_findObjectById4All(tars::TarsCurrentPtr current, tars::Int32 _ret, const vector<tars::EndpointF> &activeEp, const vector<tars::EndpointF> &inactiveEp)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("tars_ret", _ret);
                tarsAttr.put("activeEp", activeEp);
                tarsAttr.put("inactiveEp", inactiveEp);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["activeEp"] = tars::JsonOutput::writeJson(activeEp);
                _p->value["inactiveEp"] = tars::JsonOutput::writeJson(inactiveEp);
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(activeEp, 2);

                _os.write(inactiveEp, 3);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 findObjectById4Any(const std::string & id,vector<tars::EndpointF> &activeEp,vector<tars::EndpointF> &inactiveEp,tars::TarsCurrentPtr current) = 0;
        static void async_response_findObjectById4Any(tars::TarsCurrentPtr current, tars::Int32 _ret, const vector<tars::EndpointF> &activeEp, const vector<tars::EndpointF> &inactiveEp)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("tars_ret", _ret);
                tarsAttr.put("activeEp", activeEp);
                tarsAttr.put("inactiveEp", inactiveEp);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["activeEp"] = tars::JsonOutput::writeJson(activeEp);
                _p->value["inactiveEp"] = tars::JsonOutput::writeJson(inactiveEp);
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(activeEp, 2);

                _os.write(inactiveEp, 3);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 findObjectByIdInSameGroup(const std::string & id,vector<tars::EndpointF> &activeEp,vector<tars::EndpointF> &inactiveEp,tars::TarsCurrentPtr current) = 0;
        static void async_response_findObjectByIdInSameGroup(tars::TarsCurrentPtr current, tars::Int32 _ret, const vector<tars::EndpointF> &activeEp, const vector<tars::EndpointF> &inactiveEp)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("tars_ret", _ret);
                tarsAttr.put("activeEp", activeEp);
                tarsAttr.put("inactiveEp", inactiveEp);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["activeEp"] = tars::JsonOutput::writeJson(activeEp);
                _p->value["inactiveEp"] = tars::JsonOutput::writeJson(inactiveEp);
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(activeEp, 2);

                _os.write(inactiveEp, 3);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 findObjectByIdInSameSet(const std::string & id,const std::string & setId,vector<tars::EndpointF> &activeEp,vector<tars::EndpointF> &inactiveEp,tars::TarsCurrentPtr current) = 0;
        static void async_response_findObjectByIdInSameSet(tars::TarsCurrentPtr current, tars::Int32 _ret, const vector<tars::EndpointF> &activeEp, const vector<tars::EndpointF> &inactiveEp)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("tars_ret", _ret);
                tarsAttr.put("activeEp", activeEp);
                tarsAttr.put("inactiveEp", inactiveEp);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["activeEp"] = tars::JsonOutput::writeJson(activeEp);
                _p->value["inactiveEp"] = tars::JsonOutput::writeJson(inactiveEp);
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(activeEp, 3);

                _os.write(inactiveEp, 4);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 findObjectByIdInSameStation(const std::string & id,const std::string & sStation,vector<tars::EndpointF> &activeEp,vector<tars::EndpointF> &inactiveEp,tars::TarsCurrentPtr current) = 0;
        static void async_response_findObjectByIdInSameStation(tars::TarsCurrentPtr current, tars::Int32 _ret, const vector<tars::EndpointF> &activeEp, const vector<tars::EndpointF> &inactiveEp)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("tars_ret", _ret);
                tarsAttr.put("activeEp", activeEp);
                tarsAttr.put("inactiveEp", inactiveEp);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["activeEp"] = tars::JsonOutput::writeJson(activeEp);
                _p->value["inactiveEp"] = tars::JsonOutput::writeJson(inactiveEp);
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(activeEp, 3);

                _os.write(inactiveEp, 4);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 findSubsetConfigById(const std::string & id,tars::SubsetConf &conf,tars::TarsCurrentPtr current) = 0;
        static void async_response_findSubsetConfigById(tars::TarsCurrentPtr current, tars::Int32 _ret, const tars::SubsetConf &conf)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("tars_ret", _ret);
                tarsAttr.put("conf", conf);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["conf"] = tars::JsonOutput::writeJson(conf);
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(conf, 2);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

    public:
        int onDispatch(tars::TarsCurrentPtr _current, vector<char> &_sResponseBuffer)
        {
            static ::std::string __tars__QueryF_all[]=
            {
                "findObjectById",
                "findObjectById4All",
                "findObjectById4Any",
                "findObjectByIdInSameGroup",
                "findObjectByIdInSameSet",
                "findObjectByIdInSameStation",
                "findSubsetConfigById"
            };

            pair<string*, string*> r = equal_range(__tars__QueryF_all, __tars__QueryF_all+7, _current->getFuncName());
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __tars__QueryF_all)
            {
                case 0:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string id;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("id", id);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(id, _jsonPtr->value["id"], true);
                    }
                    else
                    {
                        _is.read(id, 1, true);
                    }
                    vector<tars::EndpointF> _ret = findObjectById(id, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("tars_ret", _ret);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string id;
                    vector<tars::EndpointF> activeEp;
                    vector<tars::EndpointF> inactiveEp;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("id", id);
                        tarsAttr.getByDefault("activeEp", activeEp, activeEp);
                        tarsAttr.getByDefault("inactiveEp", inactiveEp, inactiveEp);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(id, _jsonPtr->value["id"], true);
                        tars::JsonInput::readJson(activeEp, _jsonPtr->value["activeEp"], false);
                        tars::JsonInput::readJson(inactiveEp, _jsonPtr->value["inactiveEp"], false);
                    }
                    else
                    {
                        _is.read(id, 1, true);
                        _is.read(activeEp, 2, false);
                        _is.read(inactiveEp, 3, false);
                    }
                    tars::Int32 _ret = findObjectById4All(id,activeEp,inactiveEp, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("tars_ret", _ret);
                            tarsAttr.put("activeEp", activeEp);
                            tarsAttr.put("inactiveEp", inactiveEp);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["activeEp"] = tars::JsonOutput::writeJson(activeEp);
                            _p->value["inactiveEp"] = tars::JsonOutput::writeJson(inactiveEp);
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(activeEp, 2);
                            _os.write(inactiveEp, 3);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string id;
                    vector<tars::EndpointF> activeEp;
                    vector<tars::EndpointF> inactiveEp;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("id", id);
                        tarsAttr.getByDefault("activeEp", activeEp, activeEp);
                        tarsAttr.getByDefault("inactiveEp", inactiveEp, inactiveEp);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(id, _jsonPtr->value["id"], true);
                        tars::JsonInput::readJson(activeEp, _jsonPtr->value["activeEp"], false);
                        tars::JsonInput::readJson(inactiveEp, _jsonPtr->value["inactiveEp"], false);
                    }
                    else
                    {
                        _is.read(id, 1, true);
                        _is.read(activeEp, 2, false);
                        _is.read(inactiveEp, 3, false);
                    }
                    tars::Int32 _ret = findObjectById4Any(id,activeEp,inactiveEp, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("tars_ret", _ret);
                            tarsAttr.put("activeEp", activeEp);
                            tarsAttr.put("inactiveEp", inactiveEp);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["activeEp"] = tars::JsonOutput::writeJson(activeEp);
                            _p->value["inactiveEp"] = tars::JsonOutput::writeJson(inactiveEp);
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(activeEp, 2);
                            _os.write(inactiveEp, 3);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string id;
                    vector<tars::EndpointF> activeEp;
                    vector<tars::EndpointF> inactiveEp;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("id", id);
                        tarsAttr.getByDefault("activeEp", activeEp, activeEp);
                        tarsAttr.getByDefault("inactiveEp", inactiveEp, inactiveEp);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(id, _jsonPtr->value["id"], true);
                        tars::JsonInput::readJson(activeEp, _jsonPtr->value["activeEp"], false);
                        tars::JsonInput::readJson(inactiveEp, _jsonPtr->value["inactiveEp"], false);
                    }
                    else
                    {
                        _is.read(id, 1, true);
                        _is.read(activeEp, 2, false);
                        _is.read(inactiveEp, 3, false);
                    }
                    tars::Int32 _ret = findObjectByIdInSameGroup(id,activeEp,inactiveEp, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("tars_ret", _ret);
                            tarsAttr.put("activeEp", activeEp);
                            tarsAttr.put("inactiveEp", inactiveEp);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["activeEp"] = tars::JsonOutput::writeJson(activeEp);
                            _p->value["inactiveEp"] = tars::JsonOutput::writeJson(inactiveEp);
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(activeEp, 2);
                            _os.write(inactiveEp, 3);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 4:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string id;
                    std::string setId;
                    vector<tars::EndpointF> activeEp;
                    vector<tars::EndpointF> inactiveEp;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("id", id);
                        tarsAttr.get("setId", setId);
                        tarsAttr.getByDefault("activeEp", activeEp, activeEp);
                        tarsAttr.getByDefault("inactiveEp", inactiveEp, inactiveEp);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(id, _jsonPtr->value["id"], true);
                        tars::JsonInput::readJson(setId, _jsonPtr->value["setId"], true);
                        tars::JsonInput::readJson(activeEp, _jsonPtr->value["activeEp"], false);
                        tars::JsonInput::readJson(inactiveEp, _jsonPtr->value["inactiveEp"], false);
                    }
                    else
                    {
                        _is.read(id, 1, true);
                        _is.read(setId, 2, true);
                        _is.read(activeEp, 3, false);
                        _is.read(inactiveEp, 4, false);
                    }
                    tars::Int32 _ret = findObjectByIdInSameSet(id,setId,activeEp,inactiveEp, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("tars_ret", _ret);
                            tarsAttr.put("activeEp", activeEp);
                            tarsAttr.put("inactiveEp", inactiveEp);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["activeEp"] = tars::JsonOutput::writeJson(activeEp);
                            _p->value["inactiveEp"] = tars::JsonOutput::writeJson(inactiveEp);
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(activeEp, 3);
                            _os.write(inactiveEp, 4);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 5:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string id;
                    std::string sStation;
                    vector<tars::EndpointF> activeEp;
                    vector<tars::EndpointF> inactiveEp;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("id", id);
                        tarsAttr.get("sStation", sStation);
                        tarsAttr.getByDefault("activeEp", activeEp, activeEp);
                        tarsAttr.getByDefault("inactiveEp", inactiveEp, inactiveEp);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(id, _jsonPtr->value["id"], true);
                        tars::JsonInput::readJson(sStation, _jsonPtr->value["sStation"], true);
                        tars::JsonInput::readJson(activeEp, _jsonPtr->value["activeEp"], false);
                        tars::JsonInput::readJson(inactiveEp, _jsonPtr->value["inactiveEp"], false);
                    }
                    else
                    {
                        _is.read(id, 1, true);
                        _is.read(sStation, 2, true);
                        _is.read(activeEp, 3, false);
                        _is.read(inactiveEp, 4, false);
                    }
                    tars::Int32 _ret = findObjectByIdInSameStation(id,sStation,activeEp,inactiveEp, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("tars_ret", _ret);
                            tarsAttr.put("activeEp", activeEp);
                            tarsAttr.put("inactiveEp", inactiveEp);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["activeEp"] = tars::JsonOutput::writeJson(activeEp);
                            _p->value["inactiveEp"] = tars::JsonOutput::writeJson(inactiveEp);
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(activeEp, 3);
                            _os.write(inactiveEp, 4);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 6:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string id;
                    tars::SubsetConf conf;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("id", id);
                        tarsAttr.getByDefault("conf", conf, conf);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(id, _jsonPtr->value["id"], true);
                        tars::JsonInput::readJson(conf, _jsonPtr->value["conf"], false);
                    }
                    else
                    {
                        _is.read(id, 1, true);
                        _is.read(conf, 2, false);
                    }
                    tars::Int32 _ret = findSubsetConfigById(id,conf, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("tars_ret", _ret);
                            tarsAttr.put("conf", conf);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["conf"] = tars::JsonOutput::writeJson(conf);
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(conf, 2);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }
    };


}



#endif
